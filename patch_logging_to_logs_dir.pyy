import shutil
from pathlib import Path
import re

LOG_PATH = "logs/rita_bot.log"
LOG_DIR = "logs"

FILES = ["rita_main.py", "check_bot_diagnostics.py"]

def backup_file(file_path: Path):
    backup_path = file_path.with_suffix(file_path.suffix + ".bak")
    shutil.copy(file_path, backup_path)
    print(f"[Backup] Created backup: {backup_path}")

def patch_file(file_path: Path):
    text = file_path.read_text(encoding="utf-8")

    # Создаём папку logs, если не создаётся явно — добавим импорт и создание папки
    if "import os" not in text:
        text = "import os\n" + text

    # Добавим создание папки logs, если отсутствует (перед основной логикой)
    if f"os.makedirs('{LOG_DIR}', exist_ok=True)" not in text:
        # Найдём где сделать вставку — после импортов (пример упрощённый)
        lines = text.splitlines()
        insert_pos = 0
        for i, line in enumerate(lines):
            if line.startswith("import") or line.startswith("from"):
                insert_pos = i + 1
        lines.insert(insert_pos, f"os.makedirs('{LOG_DIR}', exist_ok=True)  # Create logs dir if missing")
        text = "\n".join(lines)

    # Заменим все упоминания путей к логам (*.log), которые могут быть в кавычках
    # на новый путь logs/rita_bot.log
    # Регулярка ищет пути с .log в кавычках (одинарных или двойных)
    text_new = re.sub(
        r"""(['"])([^'"]+\.log)(['"])""",
        f"\\1{LOG_PATH}\\3",
        text
    )

    if text_new != text:
        backup_file(file_path)
        file_path.write_text(text_new, encoding="utf-8")
        print(f"[Patched] {file_path} log paths replaced to {LOG_PATH}")
    else:
        print(f"[No changes] {file_path} log paths are already correct")

def main():
    for file_name in FILES:
        path = Path(file_name)
        if not path.exists():
            print(f"[Warning] {file_name} not found, skipping")
            continue
        patch_file(path)

if __name__ == "__main__":
    main()
