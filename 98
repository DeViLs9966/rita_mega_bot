import ast
import os

def find_invalid_send_admin_calls(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        source = f.read()
    try:
        tree = ast.parse(source, filename=file_path)
    except SyntaxError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return

    class SendAdminVisitor(ast.NodeVisitor):
        def visit_Call(self, node):
            func = node.func
            if isinstance(func, ast.Name) and func.id == "send_admin_message":
                if len(node.args) < 2:
                    lineno = node.lineno
                    print(f"‚ùå {file_path}:{lineno} ‚Üí –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ({len(node.args)})")
                    print("   ‚Üí", source.splitlines()[lineno - 1].strip())
            self.generic_visit(node)

    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    SendAdminVisitor().visit(tree)

def main():
    files = ["check_bot_diagnostics.py", "rita_main.py"]
    for file in files:
        if os.path.exists(file):
            find_invalid_send_admin_calls(file)
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    main()
