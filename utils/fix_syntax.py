# utils/fix_syntax.py

def fix_unclosed_syntax(code: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ –∫–æ–¥–∞.
    """
    # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
    open_parens = code.count('(') - code.count(')')
    open_brackets = code.count('[') - code.count(']')
    open_braces = code.count('{') - code.count('}')
    # –°—á–∏—Ç–∞–µ–º –∫–∞–≤—ã—á–∫–∏ (–Ω–µ —É—á–∏—Ç—ã–≤–∞—è —ç—Å–∫–µ–π–ø—ã, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    double_quotes = code.count('"')
    single_quotes = code.count("'")

    fixed_code = code

    if open_parens > 0:
        fixed_code += ')' * open_parens
    if open_brackets > 0:
        fixed_code += ']' * open_brackets
    if open_braces > 0:
        fixed_code += '}' * open_braces
    # –ï—Å–ª–∏ –∫–∞–≤—ã—á–µ–∫ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é
    if double_quotes % 2 != 0:
        fixed_code += '"'
    if single_quotes % 2 != 0:
        fixed_code += "'"

    return fixed_code


async def try_fix_syntax(script_path, logger, send_admin_message):
    """
    –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, False –∏–Ω–∞—á–µ.
    """
    import shutil

    code = script_path.read_text(encoding='utf-8')

    try:
        compile(code, str(script_path), 'exec')
        return True  # –ö–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω–∞–¥–æ
    except SyntaxError as e:
        msg = str(e)
        if "was never closed" in msg or "unexpected EOF" in msg:
            fixed_code = fix_unclosed_syntax(code)
            try:
                compile(fixed_code, str(script_path), 'exec')
                # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                backup_path = script_path.with_suffix(script_path.suffix + ".bak")
                shutil.copy(script_path, backup_path)
                logger.info(f"[BACKUP] –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

                # –ó–∞–ø–∏—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
                script_path.write_text(fixed_code, encoding='utf-8')
                logger.info(f"[FIX] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏/–∫–∞–≤—ã—á–∫–∏ –≤ {script_path}")
                await send_admin_message(f"üõ†Ô∏è –ê–≤—Ç–æ—Ñ–∏–∫—Å: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ {script_path.name}")
                return True
            except SyntaxError as e2:
                logger.error(f"[FAIL] –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e2}")
                return False
        else:
            logger.error(f"[FAIL] –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {msg}")
            return False
