import logging
from pathlib import Path
import shutil
import difflib
import ast
import asyncio
import openai

# Логгер как у тебя
logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Пути к скриптам и логу с новой папкой logs/
RITA_MAIN_PATH = Path("rita_main.py")
CHECK_DIAG_PATH = Path("check_bot_diagnostics.py")
LOG_PATH = Path("logs/check_bot_diagnostics.log")  # вот тут изменил путь на logs/

async def analyze_and_fix_script(script_path: Path, log_path: Path) -> bool:
    try:
        if isinstance(script_path, str):
            script_path = Path(script_path)
        if isinstance(log_path, str):
            log_path = Path(log_path)

        if not script_path.exists():
            logger.warning(f"[WARN] Файл не найден: {script_path}")
            return False

        if not log_path.exists():
            logger.warning(f"[WARN] Лог-файл не найден: {log_path}")
            # НЕ выходим! Просто продолжим, лог будем пустым
            log_content = ""
        else:
            log_content = log_path.read_text(encoding="utf-8")

        original_code = script_path.read_text(encoding="utf-8")
        fixed_code = original_code

        lines = fixed_code.splitlines()

        # 1. Добавляем : в конце async def
        for i, line in enumerate(lines):
            if line.strip().startswith("async def") and not line.strip().endswith(":"):
                lines[i] += ":"
                logger.info(f"[FIX] Добавлен ':' в строке {i + 1}")

        # 2. Закрываем f-строки
        for i, line in enumerate(lines):
            if 'f"' in line and not line.strip().endswith('"'):
                lines[i] += '"'
                logger.info(f"[FIX] Закрыта f-строка в строке {i + 1}")

        fixed_code = "\n".join(lines)

        # Пробуем компилировать
        try:
            compile(fixed_code, str(script_path), 'exec')
        except SyntaxError as e:
            msg = str(e)
            if "unmatched ')'" in msg or "was never closed" in msg or "unexpected EOF" in msg:
                logger.warning(f"[WARN] Обрыв конструкции: {msg}")
                from fix_unclosed import fix_unclosed_syntax  # или реализовать здесь

                fixed_code2 = fix_unclosed_syntax(fixed_code)

                try:
                    compile(fixed_code2, str(script_path), 'exec')

                    backup_path = script_path.with_suffix(".backup")
                    shutil.copy(script_path, backup_path)
                    logger.info(f"[BACKUP] Сделана резервная копия: {backup_path}")

                    script_path.write_text(fixed_code2, encoding="utf-8")
                    logger.info(f"[FIX] Исправлены незакрытые конструкции в {script_path}")
                    fixed_code = fixed_code2
                except SyntaxError as e2:
                    logger.error(f"[FAIL] Ошибка после попытки фикса: {e2}")
                    return False
            else:
                logger.error(f"[FAIL] Синтаксическая ошибка: {msg}")
                return False

        # Проверяем через ast
        try:
            ast.parse(fixed_code)
        except SyntaxError as e:
            logger.error(f"[FAIL] Ошибка при ast.parse: {e}")
            return False

        if fixed_code != original_code:
            script_path.write_text(fixed_code, encoding="utf-8")

            diff = difflib.unified_diff(
                original_code.splitlines(keepends=True),
                fixed_code.splitlines(keepends=True),
                fromfile=str(script_path),
                tofile=str(script_path) + " (исправлен)",
            )
            diff_text = ''.join(diff)
            logger.info(f"[DIFF] Изменения в {script_path}:\n{diff_text}")
            logger.info(f"[SAVE] Код успешно обновлён: {script_path}")
            return True
        else:
            logger.info("[INFO] Нет изменений — код в порядке.")
            return False

    except Exception as e:
        logger.error(f"[ERROR] analyze_and_fix_script(): {e}")
        return False

