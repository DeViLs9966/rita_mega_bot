import os
import asyncio
import re
import logging

from pathlib import Path

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s | %(message)s')


def ensure_gitignore():
    gitignore = Path(".gitignore")
    if not gitignore.exists():
        logging.info("üìÑ –°–æ–∑–¥–∞—é .gitignore...")
        gitignore.write_text("keys.env\n.token_clean\n.chat_id\n.env\n")
    else:
        content = gitignore.read_text()
        additions = ["keys.env", ".token_clean", ".chat_id", ".env"]
        for line in additions:
            if line not in content:
                content += f"{line}\n"
        gitignore.write_text(content)
    logging.info("‚úÖ .gitignore –æ–±–Ω–æ–≤–ª—ë–Ω.")


def remove_keys_from_git():
    keys = ["keys.env", ".env"]
    for key in keys:
        if Path(key).exists():
            os.system(f"git rm --cached {key}")
    os.system("git add .gitignore")
    os.system("git commit -m 'üîí Remove secrets and update .gitignore'")


def fix_bot_token_usage(file_path):
    code = Path(file_path).read_text()
    if "TELEGRAM_BOT_TOKEN" in code:
        code = re.sub(
            r"(bot\s*=\s*Bot\s*ÓÄÅ\s*token\s*=\s*)(TELEGRAM_BOT_TOKEN)",
            r"\1cleaned_token",
            code
        )
        if "cleaned_token" not in code:
            code = "with open('.token_clean') as f:\n    cleaned_token = f.read().strip()\n\n" + code
        Path(file_path).write_text(code)
        logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω token –≤ {file_path}")


def inject_chat_id(file_path):
    code = Path(file_path).read_text()
    if "TELEGRAM_CHAT_ID" not in code:
        code = "TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '558079551')\n" + code
        Path(file_path).write_text(code)
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω TELEGRAM_CHAT_ID –≤ {file_path}")


def fix_async_await(file_path):
    code = Path(file_path).read_text()
    pattern = r"async def (run_ai_improvement_loop|auto_fix_loop|auto_fix_and_restart_if_needed)ÓÄÅÓÄÅ:"
    if re.search(pattern, code):
        if "asyncio.create_task(" not in code:
            code = code.replace(
                "async def main():",
                "async def main():\n    asyncio.create_task(run_ai_improvement_loop())\n    asyncio.create_task(auto_fix_loop())\n    asyncio.create_task(auto_fix_and_restart_if_needed())"
            )
            Path(file_path).write_text(code)
            logging.info("‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω—ã create_task –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")


def run_all():
    logging.info("üõ†Ô∏è –ó–∞–ø—É—Å–∫ auto_fix_all.py")
    ensure_gitignore()
    remove_keys_from_git()

    files = ["check_bot_diagnostics.py", "rita_main.py"]
    for f in files:
        if Path(f).exists():
            fix_bot_token_usage(f)
            inject_chat_id(f)
            fix_async_await(f)

    logging.info("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")


if __name__ == "__main__":
    run_all()
