import os
import re
import logging

# –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π send_admin_message —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def debug_send_admin_message_wrapper(func):
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ send_admin_message: {e}")
            return None
    return wrapper

def patch_file(filename):
    BACKUP = filename + ".bak"

    # –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø, –µ—Å–ª–∏ –Ω–µ—Ç
    if not os.path.exists(BACKUP):
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()
        with open(BACKUP, "w", encoding="utf-8") as f:
            f.write(content)
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {BACKUP}")
    else:
        print(f"‚ö†Ô∏è –ë—ç–∫–∞–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {BACKUP}")

    with open(filename, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ë—Ä—Ç–∫–∞
    wrapper_code = (
        "def debug_send_admin_message_wrapper(func):\n"
        "    async def wrapper(*args, **kwargs):\n"
        "        try:\n"
        "            return await func(*args, **kwargs)\n"
        "        except Exception as e:\n"
        "            import logging\n"
        "            logging.error(f\"–û—à–∏–±–∫–∞ –≤ send_admin_message: {e}\")\n"
        "            return None\n"
        "    return wrapper\n"
    )
    if any("def debug_send_admin_message_wrapper" in line for line in lines):
        print(f"‚ÑπÔ∏è –í —Ñ–∞–π–ª–µ {filename} –æ–±—ë—Ä—Ç–∫–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É.")
        return

    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ë—Ä—Ç–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ —à–∞–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞)
    insert_pos = 0
    for i, line in enumerate(lines):
        if line.strip() and not line.startswith("#") and not line.startswith("import"):
            insert_pos = i
            break

    lines.insert(insert_pos, wrapper_code + "\n")

    # –ù–∞—Ö–æ–¥–∏–º –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ send_admin_message, —á—Ç–æ–±—ã –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ
    pattern = re.compile(r"async def send_admin_messageÓÄÅ.*ÓÄÅ:")
    new_lines = []
    inside_func = False
    func_name = ""
    indent = ""
    for line in lines:
        if pattern.match(line.strip()):
            inside_func = True
            func_name = "send_admin_message"
            indent = line[:len(line) - len(line.lstrip())]
            new_lines.append(line)
            continue

        if inside_func:
            # –∏—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Å—Ç—Ä–æ–∫—É –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ –∏–ª–∏ —Å –º–µ–Ω—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
            if line.strip() == "" or len(line) - len(line.lstrip()) <= len(indent):
                inside_func = False
                new_lines.append(line)
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º send_admin_message –≤ @debug_send_admin_message_wrapper
    for i, line in enumerate(new_lines):
        if pattern.match(line.strip()):
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
            if i > 0 and new_lines[i-1].strip() == "@debug_send_admin_message_wrapper":
                break
            new_lines.insert(i, "@debug_send_admin_message_wrapper\n")
            break

    with open(filename, "w", encoding="utf-8") as f:
        f.writelines(new_lines)

    print(f"‚úÖ –û–±—ë—Ä—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ {filename}.")


if __name__ == "__main__":
    files_to_patch = ["check_bot_diagnostics.py", "rita_main.py"]
    for file in files_to_patch:
        if os.path.exists(file):
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file}")
            patch_file(file)
        else:
            print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
