import re
import sys
from pathlib import Path

# Функции, которые добавим в начало файлов (если нет)
SAFE_FUNCS_CODE = '''
import pathlib

def safe_get_parent(path):
    if path is None:
        return None
    if isinstance(path, str):
        path = pathlib.Path(path)
    try:
        return path.parent
    except Exception:
        return None

def safe_path_join(parent, child):
    try:
        if parent is None:
            return pathlib.Path(child)
        else:
            return pathlib.Path(parent) / child
    except Exception:
        return pathlib.Path(child)
'''

# Патчи:
# 1) Заменить все вызовы .parent у переменных/строк на safe_get_parent(...)
#    Пример: my_path.parent -> safe_get_parent(my_path)
# 2) Заменить операции / у путей на safe_path_join
#    Пример: path1 / path2 -> safe_path_join(path1, path2)

def patch_file(filepath: Path):
    code = filepath.read_text(encoding='utf-8')

    # Добавим импорты и функции safe_* если их там нет
    if 'def safe_get_parent' not in code:
        code = SAFE_FUNCS_CODE.strip() + '\n\n' + code

    # Регулярка для замены .parent на safe_get_parent(...)
    # Здесь аккуратно заменим все вхождения вида <variable>.parent, не затронув другие слова
    code = re.sub(r'(\b\w[\w\d_]*)\.parent\b', r'safe_get_parent(\1)', code)

    # Регулярка для замены операций '/' на safe_path_join
    # Сложно заменить все автоматически без парсинга, но попробуем простым regex для бинарных операций вида:
    # <var> / <var_or_str>
    # учтём что слева и справа могут быть скобки и пробелы
    # Для безопасности заменим только простые выражения: word / word или word / "string" или "string" / word

    # Функция для замены в строке кода выражения a / b
    def repl_div(match):
        left = match.group(1).strip()
        right = match.group(2).strip()
        return f'safe_path_join({left}, {right})'

    # Используем regex, который ищет (something) / (something), с ограничениями
    # Например: (\w+) / ("[^"]+"|\w+)
    code = re.sub(
        r'(\b[\w\.]+\b)\s*/\s*([\w\.\"\']+)',  # простой паттерн: имя или вызов слева, имя/строка справа
        repl_div,
        code
    )

    # Записываем обратно
    filepath.write_text(code, encoding='utf-8')

    print(f'[PATCHER] Файл {filepath} успешно обработан.')

def main():
    # Пути к файлам, которые надо обработать
    files = [
        Path('rita_main.py'),
        Path('check_bot_diagnostics.py'),
    ]

    for f in files:
        if not f.exists():
            print(f'[PATCHER] Файл {f} не найден, пропускаю.')
            continue
        patch_file(f)

if __name__ == '__main__':
    main()
