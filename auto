import asyncio
import os
import sys
import logging
import signal
import subprocess
from pathlib import Path
from typing import Optional
import aiofiles
import openai
from telegram import Bot
from telegram.error import InvalidToken

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) ===

TELEGRAM_BOT_TOKEN = " "  # —Ç–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
TELEGRAM_CHAT_ID =    # —Ç–≤–æ–π Telegram ID
OPENAI_API_KEY = " "  # —Ç–≤–æ–π OpenAI –∫–ª—é—á

RITA_MAIN_SCRIPT = "rita_main.py"
LOG_FILE_PATH = "rita_bot.log"
AUTO_FIX_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI ===
bot = Bot(token=TELEGRAM_BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

async def send_telegram_message(text: str):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}")
    except InvalidToken:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def kill_existing_rita_main():
    """–£–±–∏—Ç—å –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã rita_main.py, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
    try:
        import psutil
    except ImportError:
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É psutil: pip install psutil")
        return

    count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = proc.info['cmdline']
            if cmdline and RITA_MAIN_SCRIPT in cmdline:
                proc.kill()
                count += 1
        except Exception:
            continue
    if count > 0:
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {RITA_MAIN_SCRIPT}")
    else:
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å—ã {RITA_MAIN_SCRIPT} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def read_log_file() -> Optional[str]:
    if not os.path.exists(LOG_FILE_PATH):
        await send_telegram_message("‚ö†Ô∏è –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    try:
        async with aiofiles.open(LOG_FILE_PATH, mode='r', encoding='utf-8') as f:
            content = await f.read()
            return content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        return None

async def read_main_script() -> Optional[str]:
    if not os.path.exists(RITA_MAIN_SCRIPT):
        await send_telegram_message("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    try:
        async with aiofiles.open(RITA_MAIN_SCRIPT, mode='r', encoding='utf-8') as f:
            content = await f.read()
            return content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None

async def generate_fix_patch(error_log_snippet: str, file_content: str) -> Optional[str]:
    prompt = (
        f"–í —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ –ª–æ–≥–∞ –æ—à–∏–±–∫–∞:\n{error_log_snippet}\n\n"
        f"–ü—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞:\n{file_content}\n\n"
        "–í–µ—Ä–Ω–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –∫–æ–¥ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
    )
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
            max_tokens=1500,
        )
        fixed_code = response.choices[0].message.content.strip()
        logger.info("–ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI")
        return fixed_code
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç OpenAI: {e}")
        return None

async def write_main_script(content: str):
    try:
        async with aiofiles.open(RITA_MAIN_SCRIPT, mode='w', encoding='utf-8') as f:
            await f.write(content)
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç {RITA_MAIN_SCRIPT} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await send_telegram_message("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: {e}")

async def restart_rita_main():
    kill_existing_rita_main()
    # –ó–∞–ø—É—Å–∫ rita_main.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è —Ç–µ–∫—É—â–∏–π)
    logger.info(f"–ó–∞–ø—É—Å–∫ {RITA_MAIN_SCRIPT}...")
    subprocess.Popen([sys.executable, RITA_MAIN_SCRIPT])
    await send_telegram_message("üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç rita_main.py –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

async def analyze_and_fix():
    log_content = await read_log_file()
    main_script_content = await read_main_script()
    if not log_content or not main_script_content:
        return

    # –í–æ–∑—å–º–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    error_snippet = log_content[-1000:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ "error", "exception" –∏–ª–∏ "traceback"
    if any(word in error_snippet.lower() for word in ["error", "exception", "traceback"]):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
        fixed_code = await generate_fix_patch(error_snippet, main_script_content)
        if fixed_code:
            await write_main_script(fixed_code)
            await restart_rita_main()
        else:
            await send_telegram_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
    else:
        logger.info("–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–∫—Ä–∏–ø—Ç –≤ –ø–æ—Ä—è–¥–∫–µ.")
        await send_telegram_message("‚úÖ –£–ª—É—á—à–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–∫—Ä–∏–ø—Ç –≤ –ø–æ—Ä—è–¥–∫–µ.")

async def main_loop():
    await send_telegram_message("üîß –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã...")
    while True:
        try:
            await analyze_and_fix()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–ª—É—á—à–µ–Ω–∏–π: {e}")
        await asyncio.sleep(AUTO_FIX_INTERVAL)

def shutdown(loop):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    for task in asyncio.all_tasks(loop):
        task.cancel()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, lambda: shutdown(loop))
        loop.run_until_complete(main_loop())
    except KeyboardInterrupt:
        logger.info("–í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        loop.close()
        logger.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
