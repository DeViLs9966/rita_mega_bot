# save this as patch_send_admin_message.py in ~/rita_mega_bot and –∑–∞–ø—É—Å—Ç–∏ python3 patch_send_admin_message.py

import re
import shutil
import os

FILE_PATH = "check_bot_diagnostics.py"
BACKUP_PATH = FILE_PATH + ".bak"

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ send_admin_message
correct_function_code = '''
import aiohttp
import logging

async def send_admin_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as resp:
                if resp.status == 200:
                    logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: {text}")
                else:
                    resp_text = await resp.text()
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {{resp.status}} {{resp_text}}")
    except Exception as e:
        logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {{e}}")
'''

def backup_file():
    if not os.path.exists(BACKUP_PATH):
        shutil.copyfile(FILE_PATH, BACKUP_PATH)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞: {BACKUP_PATH}")
    else:
        print(f"‚ö†Ô∏è –ë—ç–∫–∞–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {BACKUP_PATH}")

def replace_send_admin_message(code):
    # –ò—â–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ send_admin_message
    # –∏ –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –∏—Ö –∫–æ–¥ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    # –ü—Ä–∏–º–µ—Ä–Ω–æ –∏—â–µ–º:
    # async def send_admin_message(...)
    # ... —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ...
    pattern = re.compile(r'(async def send_admin_message\s*ÓÄÅ.*?ÓÄÅ:)(.*?)(?=^\s*async def|\Z)', re.DOTALL | re.MULTILINE)
    matches = list(pattern.finditer(code))
    if not matches:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è send_admin_message –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ!")
        return code
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ(–∏–π) —Ñ—É–Ω–∫—Ü–∏–∏ send_admin_message. –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é...")
    # –ó–∞–º–µ–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–æ–±—ã—á–Ω–æ –æ–Ω–∞ –æ–¥–Ω–∞)
    first = matches[0]
    start, end = first.span()
    new_code = code[:start] + correct_function_code + code[end:]
    return new_code

def fix_calls(code):
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –∏—Å–ø—Ä–∞–≤–∏–º –≤—ã–∑–æ–≤—ã send_admin_message,
    # –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–Ω—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    # –ü—Ä–∏–º–µ—Ä: await send_admin_message(bot, chat_id, text)
    # –ó–∞–º–µ–Ω–∏–º –Ω–∞ await send_admin_message(chat_id, text)
    # Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —Å 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: send_admin_message\s*ÓÄÅ\s*[^,]+,\s*[^,]+,\s*[^)]+ÓÄÅ
    pattern_calls = re.compile(r'send_admin_message\s*ÓÄÅ\s*[^,]+,\s*[^,]+,\s*[^)]+ÓÄÅ')
    replaced = 0
    def repl(m):
        nonlocal replaced
        # –í–æ–∑—å–º—ë–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–±–æ–∫
        args_str = m.group(0)[len("send_admin_message("):-1]
        # –†–∞–∑–æ–±—å—ë–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π
        parts = [a.strip() for a in args_str.split(",")]
        # –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (chat_id –∏ text)
        new_call = f"send_admin_message({parts[-2]}, {parts[-1]})"
        replaced += 1
        return new_call
    code_fixed = pattern_calls.sub(repl, code)
    if replaced > 0:
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {replaced} –≤—ã–∑–æ–≤(–æ–≤) send_admin_message —Å 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞")
    else:
        print("‚ÑπÔ∏è –í—ã–∑–æ–≤—ã send_admin_message —Å 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    return code_fixed

def main():
    if not os.path.exists(FILE_PATH):
        print(f"‚ùå –§–∞–π–ª {FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    backup_file()
    with open(FILE_PATH, "r", encoding="utf-8") as f:
        code = f.read()
    code = replace_send_admin_message(code)
    code = fix_calls(code)
    with open(FILE_PATH, "w", encoding="utf-8") as f:
        f.write(code)
    print(f"‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ –∫ {FILE_PATH}!")

if __name__ == "__main__":
    main()
