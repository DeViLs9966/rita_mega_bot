import os
import re
import shutil

MAIN_FILE = "rita_main.py"
DIAGNOSTIC_FILE = "check_bot_diagnostics.py"
BACKUP_SUFFIX = ".bak_patchfix2"

SAFE_FUNCTIONS_CODE = '''
import pathlib

def safe_get_parent(path):
    if path is None:
        return None
    if isinstance(path, str):
        path = pathlib.Path(path)
    try:
        parent = path.parent
        if isinstance(parent, pathlib.Path):
            return parent
        else:
            return None
    except Exception:
        return None

def safe_path_join(parent, child):
    try:
        if parent is None:
            return pathlib.Path(child)
        else:
            return pathlib.Path(parent) / child
    except Exception:
        return pathlib.Path(child)
'''

def backup_file(filename):
    backup_name = filename + BACKUP_SUFFIX
    if not os.path.exists(backup_name):
        shutil.copy2(filename, backup_name)
        print(f"[Backup] Создана резервная копия: {backup_name}")
    else:
        print(f"[Backup] Резервная копия уже существует: {backup_name}")

def patch_file(filename):
    print(f"[Patch] Обработка файла: {filename}")
    backup_file(filename)

    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()

    # Добавляем определение функций safe_get_parent и safe_path_join после импорта (после первой импорт строки)
    lines = content.splitlines()
    insert_index = 0
    for i, line in enumerate(lines):
        if line.startswith("import") or line.startswith("from"):
            insert_index = i + 1
    # Вставляем после последнего импорта
    new_lines = lines[:insert_index] + [SAFE_FUNCTIONS_CODE] + lines[insert_index:]
    content = "\n".join(new_lines)

    # Заменяем все .parent у переменных (по шаблону var.parent)
    # Чтобы не трогать комментарии и строки, попробуем ограничить замену
    # Регулярка для .parent, где перед .parent стоит не пробел, а идентификатор (слово)
    content = re.sub(r"(\b\w+)\.parent", r"safe_get_parent(\1)", content)

    # Заменяем все safe_get_parent(...) / "something" на safe_path_join
    pattern = re.compile(r"safe_get_parent([^)]+)\s*/\s*([\"'].*?[\"'])")
    content = pattern.sub(r"safe_path_join(safe_get_parent(\1), \2)", content)

    # Также меняем операции / с None, где может быть None / str
    # Заменим все (переменная) / (строка в кавычках) на safe_path_join(...), где переменная может быть safe_get_parent(...) или другая
    # Уже сделал для safe_get_parent, но могут быть и другие переменные - лучше оставить как есть и отследить дополнительно

    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)

    print(f"[Patch] Файл {filename} успешно обновлён.")

def main():
    patch_file(MAIN_FILE)
    patch_file(DIAGNOSTIC_FILE)
    print("[Patch] Все патчи применены.")

if __name__ == "__main__":
    main()
