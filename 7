import os
import asyncio
from telegram import Bot
from dotenv import load_dotenv

TOKEN_FILE = ".token_clean"
ENV_FILE = ".env"
FILES_TO_PATCH = ["check_bot_diagnostics.py", "rita_main.py"]

def load_token():
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r") as f:
            token = f.read().strip()
        print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ {TOKEN_FILE}: '{token}'")
        return token
    if os.path.exists(ENV_FILE):
        load_dotenv(ENV_FILE)
        token = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
        print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ .env: '{token}'")
        return token
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ""

async def validate_token(token: str) -> bool:
    try:
        bot = Bot(token=token)
        me = await bot.get_me()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ë–æ—Ç: @{me.username}")
        return True
    except Exception as e:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}")
        return False

def patch_file(file_path: str, token: str):
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with open(file_path, "r") as f:
        content = f.read()

    # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
    content = content.replace("TELEGRAM_BOT_TOKEN = \"\"", f"TELEGRAM_BOT_TOKEN = \"{token}\"")
    content = content.replace("TELEGRAM_BOT_TOKEN = ''", f"TELEGRAM_BOT_TOKEN = \"{token}\"")
    content = content.replace("TELEGRAM_BOT_TOKEN = ''", f"TELEGRAM_BOT_TOKEN = \"{token}\"")
    content = content.replace("TELEGRAM_BOT_TOKEN = os.getenv(\"TELEGRAM_BOT_TOKEN\")", f"TELEGRAM_BOT_TOKEN = \"{token}\"")

    # –£–¥–∞–ª–∏–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
    lines = content.splitlines()
    new_lines = []
    for line in lines:
        if "Bot(token=" in line and "TELEGRAM_BOT_TOKEN" in line:
            new_lines.append(f"bot = Bot(token=\"{token}\")")
        else:
            new_lines.append(line)
    new_content = "\n".join(new_lines)

    with open(file_path, "w") as f:
        f.write(new_content)

    print(f"üîß –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: {file_path}")

def save_token(token: str):
    with open(TOKEN_FILE, "w") as f:
        f.write(token)
    print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {TOKEN_FILE}")

async def main():
    print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ fix_bot_token_and_patch.py")
    token = load_token()
    if not token:
        return

    if await validate_token(token):
        save_token(token)
        for file in FILES_TO_PATCH:
            patch_file(file, token)
    else:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
