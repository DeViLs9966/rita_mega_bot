import shutil
from pathlib import Path
import re

FILE = "check_bot_diagnostics.py"
BACKUP = FILE + ".bak_patchfix"

def backup():
    if not Path(BACKUP).exists():
        shutil.copy2(FILE, BACKUP)
        print(f"Резервная копия создана: {BACKUP}")
    else:
        print(f"Резервная копия уже есть: {BACKUP}")

def insert_safe_get_parent(content):
    if "def safe_get_parent" in content:
        print("Функция safe_get_parent уже присутствует")
        return content
    code = '''
def safe_get_parent(path):
    """
    Безопасно получить родительский каталог Path, возвращает Path('.') если path None или пустой.
    """
    from pathlib import Path
    try:
        p = Path(path)
        if not p or str(p) == '':
            return Path('.')
        return p.parent
    except Exception:
        return Path('.')
'''
    # Вставим в начало файла (после импорта)
    pattern = re.compile(r'(import .+\n)+', re.MULTILINE)
    m = pattern.search(content)
    if m:
        pos = m.end()
        content = content[:pos] + code + content[pos:]
        print("Функция safe_get_parent вставлена")
    else:
        content = code + content
        print("Функция safe_get_parent добавлена в начало файла")
    return content

def insert_safe_send_message(content):
    if "async def safe_send_message" in content:
        print("Функция safe_send_message уже присутствует")
        return content
    code = '''
import asyncio
from telegram.error import TelegramError

async def safe_send_message(bot, chat_id, text, **kwargs):
    """
    Безопасная отправка сообщения с обработкой event loop.
    """
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = None
    try:
        if loop and loop.is_running():
            from telegram import Bot
            # Запускаем в новом цикле, если нужно
            await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        else:
            await bot.send_message(chat_id=chat_id, text=text, **kwargs)
    except TelegramError as e:
        print(f"Ошибка Telegram при отправке сообщения: {e}")
    except Exception as e:
        print(f"Неизвестная ошибка при отправке сообщения: {e}")
'''
    # Вставим в конец файла
    content += "\n" + code + "\n"
    print("Функция safe_send_message добавлена")
    return content

def fix_path_operations(content):
    # Найдем все случаи выражения с /, где одна из частей может быть None
    # В основном ищем строки типа: some_var / 'string'
    # Заменим на: Path(some_var) / 'string' или с защитой через safe_get_parent
    pattern = re.compile(r'(\w+)\s*/\s*([\'"].+?[\'"])')
    replacements = 0
    def repl(m):
        nonlocal replacements
        var = m.group(1)
        val = m.group(2)
        replacements += 1
        return f"(Path({var}) / {val})"
    content_new = pattern.sub(repl, content)

    # Дополнительно заменить деления None / str на безопасные вызовы
    # Например, replace None / 'str' -> Path('.') / 'str'
    content_new = re.sub(r'None\s*/\s*([\'"].+?[\'"])', r"Path('.') / \1", content_new)

    if replacements > 0:
        print(f"Исправлено {replacements} выражений с делением путей '/' на безопасные Path(...) / ...")
    else:
        print("Выражений с делением путей '/' не найдено или уже исправлены")
    return content_new

def fix_send_message_calls(content):
    # Найдем все вызовы bot.send_message(...) и заменим на await safe_send_message(bot, ...)
    # Можно сделать через простое регулярное выражение
    # Предполагается, что bot -- переменная бота, chat_id и text -- параметры
    # Пример: await bot.send_message(chat_id=..., text=...) -> await safe_send_message(bot, chat_id=..., text=...)

    pattern = re.compile(r'await\s+(\w+)\.send_message(.+?)')
    replacements = 0
    def repl(m):
        nonlocal replacements
        bot_var = m.group(1)
        params = m.group(2)
        replacements +=1
        return f"await safe_send_message({bot_var}, {params})"
    content_new = pattern.sub(repl, content)
    if replacements > 0:
        print(f"Заменено {replacements} вызовов send_message на safe_send_message")
    else:
        print("Вызовов send_message для замены не найдено")
    return content_new

def main():
    backup()
    with open(FILE, 'r', encoding='utf-8') as f:
        content = f.read()
    content = insert_safe_get_parent(content)
    content = fix_path_operations(content)
    content = insert_safe_send_message(content)
    content = fix_send_message_calls(content)
    with open(FILE, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"Патч применён к {FILE} успешно.")

if __name__ == "__main__":
    main()
