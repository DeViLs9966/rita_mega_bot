# --- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ ---
TOKEN_FILE = Path("telegram_token.txt")
if TOKEN_FILE.exists():
    with TOKEN_FILE.open("r") as f:
        cleaned_token = f.read().strip()
else:
    cleaned_token = None
# –¢–æ–∫–µ–Ω –¥–ª—è Telegram ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ —Ñ–∞–π–ª–∞, –ª–∏–±–æ fallback –∏–∑ —Å—Ç—Ä–æ–∫–∏
TELEGRAM_BOT_TOKEN = cleaned_token or "7609027838:AAFk2XZRtcvTzbgcrj6QEFWyijon4WsVKj4"
# Telegram Chat ID ‚Äî –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '558079551')
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏ –∑–∞–¥–∞—ë–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
LOGS_DIR = Path("logs")
LOGS_DIR.mkdir(exist_ok=True)
LOG_FILE = LOGS_DIR / "rita_bot.log"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.FileHandler(filename=str(LOG_FILE), encoding='utf-8'),
# –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
logger.info(f"Telegram Token –∑–∞–≥—Ä—É–∂–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}..")
rita_main.pylogger.info(f"Telegram Chat ID: {TELEGRAM_CHAT_ID}")
# --- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
# –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –ø–∏—Å–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞...
def kill_duplicate_processes(script_name: str):
        result = subprocess.run(
            ["ps", "aux"],
            capture_output=True,
            text=True,
            check=True
        lines = result.stdout.strip().split("\n")
            if script_name in line and "python" in line:
                parts = line.split()
                pid = int(parts[1])
                if pid != current_pid:
                    logger.info(f"[INFO] –ó–∞–≤–µ—Ä—à–∞—é –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid} ({script_name})")
        logger.warning(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ —É–±–∏–π—Å—Ç–≤–µ –¥—É–±–ª–µ–π: {e}")
def check_already_running():
    if os.path.exists(LOCK_FILE):
        logger.info("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.")
        sys.exit(0)
        # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        with open(LOCK_FILE, 'w') as f:
            f.write(str(os.getpid()))
def remove_lock_file():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
# –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
kill_duplicate_processes("rita_main.py")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º lock-—Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è)
check_already_running()
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
import atexit
atexit.register(remove_lock_file)
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª –Ω–∞ –æ—à–∏–±–∫–∏,
    –∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏  –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    log_file_path = "safe_path_join(logs, rita_bot.log")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
            with open(log_file_path, "r", encoding="utf-8") as log_file:
                logs = log_file.read() 
            # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ (–ø–æ–∫–∞ –±–∞–∑–æ–≤–æ)
            errors_found = re.findall(r"(Traceback|ERROR|Exception)", logs)
            if errors_found:
              logger.info (f"[AutoFix] –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö: {len(errors_found)}")"
                # –ó–¥–µ—Å—å –≤—ã–∑–æ–≤–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
                # await generate_and_apply_fixes(logs)
               logger.info ("[AutoFix] –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except FileNotFoundError:
           logger.info ("[AutoFix] –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞...")
           logger.info (f"[AutoFix] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")"
        await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
# === –ö–ª—é—á–∏ ===
HUGGINGFACE_API_KEY    = ""
GOOGLE_API_KEY    = ""
GOOGLE_CX    = ""
TELEGRAM_BOT_TOKEN = Path("7609027838:AAFk2XZRtcvTzbgcrj6QEFWyijon4WsVKj4")
TELEGRAM_ADMIN_ID =  
    format="%(asctime)s - %(levelname)s - %(message)s",
AI_MODES = ["gpt4", "gpt2", "gog", "ht"]
current_mode = Path("gpt4")
    await application.bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    nest_asyncio.apply()  # <-- –ò —Ç—É—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º
async def safe_main():
        await main()
        logger.info(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–ø—É—Å–∫–∞: {e}")"
        logger.info ("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await safe_main()
        logger.info (f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")"
asyncio.run(safe_main())
# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
def is_owner(user_id: int) -> bool:
    return user_id == OWNER_TELEGRAM_ID
# === OpenAI GPT-4 –≤—ã–∑–æ–≤ ===
def call_openai_gpt4(prompt: str) -> str:
            "Authorization": f"Bearer {OPENAI_API_KEY}","
            "Content-Type": "safe_path_join(application, json")
            "model": "gpt-4",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 1000
        resp = requests.post("https://safe_path_join(api.openai.com, v1)/safe_path_join(chat, completions"), headers=headers, json=data, timeout=30)
        resp.raise_for_status()
        return resp.json()['choices'][0]['message']['content'].strip()
        logger.error(f"OpenAI GPT-4 API error: {e}")"
        return "–û—à–∏–±–∫–∞ OpenAI GPT-4 API."
    # –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é async —Ñ—É–Ω–∫—Ü–∏—é
LOG_FILE_PATH = Path("safe_path_join(logs, rita_bot.log"))  # –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
# ‚úÖ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã send_admin_message –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
def debug_send_admin_message_wrapper(func):
    import functools
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
            if len(args) < 2 and 'text' not in kwargs:
                logging.warning("‚ö†Ô∏è [DEBUG] send_admin_message –≤—ã–∑–≤–∞–Ω –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞! args=%s, kwargs=%s", args, kwargs)
            return await func(*args, **kwargs)
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug_send_admin_message_wrapper: {e}")"
    return wrapper
# üõ°Ô∏è –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º send_admin_message (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
send_admin_message = debug_send_admin_message_wrapper(send_admin_message)
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ:
# log_info(msg: str), log_error(msg: str), main() - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        fixed_main = await analyze_and_fix_script(MAIN_SCRIPT_PATH, LOG_FILE_PATH)
        fixed_helper = await analyze_and_fix_script(HELPER_SCRIPT_PATH, LOG_FILE_PATH)
        if fixed_main or fixed_helper:
            log_info("–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")
        log_error(f"–û—à–∏–±–∫–∞ –≤ auto_fix_from_logs: {e}")"
async def auto_fix_loop(interval_minutes: int = 5):
        log_info("‚è≥ [–ê–≤—Ç–æ—Ñ–∏–∫—Å–µ—Ä] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤...")
                await send_admin_message("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç auto-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –ª–æ–≥–æ–≤.")
                await send_admin_message("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç auto-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –ª–æ–≥–æ–≤.")
            log_error(f"–û—à–∏–±–∫–∞ –≤ auto_fix_loop: {e}")"
# === HuggingFace GPT-2 –≤—ã–∑–æ–≤ ===
def call_huggingface_gpt2(prompt: str) -> str:
        headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}"
        payload = {"inputs": prompt, "parameters": {"max_new_tokens": 150, "do_sample": True, "temperature": 0.7}}
        resp = requests.post("https://api-safe_path_join(inference.huggingface.co, models)/gpt2", headers=headers, json=payload, timeout=30)
        resp.raise_for_status()
        result = resp.json()
        if isinstance(result, list) and "generated_text" in result[0]:
            return result[0]["generated_text"]
            return "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ HuggingFace GPT-2."
        logger.error(f"HuggingFace GPT-2 API error: {e}")"
        return "–û—à–∏–±–∫–∞ HuggingFace GPT-2 API."
# === Google –ø–æ–∏—Å–∫ ===
def call_google_search(query: str) -> str:
            "q": query,
            "num": 3
        resp = requests.get("https://safe_path_join(www.googleapis.com, customsearch)/v1", params=params, timeout=20)
        resp.raise_for_status()
        items = resp.json().get("items", [])
        if not items:
            return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
output = Path("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google:\n")
        for i, item in enumerate(items, start=1):
            title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            output += f"{i}. {title}\n{snippet}\n{link}\n\n"
        return output.strip()"
        logger.error(f"Google Search API error: {e}")"
        return "–û—à–∏–±–∫–∞ Google Search API."
# === HuggingFace –ø–æ–∏—Å–∫ (–ø—Ä–∏–º–µ—Ä) ===
def call_huggingface_search(query: str) -> str:
        headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}"
        payload = {"inputs": query}
        resp = requests.post("https://api-safe_path_join(inference.huggingface.co, models)/marco-safe_path_join(search, marco)-distilbert-base-msmarco", headers=headers, json=payload, timeout=20)
        resp.raise_for_status()
        data = resp.json()
        return f"HuggingFace –ø–æ–∏—Å–∫: {json.dumps(data)[:500]}..."
        logger.error(f"HuggingFace Search API error: {e}")"
        return "–û—à–∏–±–∫–∞ HuggingFace Search API."
# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è safe_path_join(–∫–æ–¥–∞, –∏–≥—Ä)/safe_path_join(—á–∏—Ç–æ–≤, APK) —á–µ—Ä–µ–∑ GPT-4 ===
def generate_code_via_gpt4(prompt: str) -> str:
    full_prompt = f"–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏–≥—Ä—É –∏–ª–∏ APK –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n{prompt}\n–î–∞–π –∫–æ–¥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."
    return call_openai_gpt4(full_prompt)"
# === TTS: —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å ===
def text_to_speech(text: str, lang="ru") -> bytes:
    tts = gTTS(text=text, lang=lang)
    bio = io.BytesIO()
    tts.write_to_fp(bio)
    bio.seek(0)
    return bio.read()
# === STT: —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç (–∏–∑ —Ñ–∞–π–ª–∞) ===
def speech_to_text(file_path: str) -> str:
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio = recognizer.record(source)
        text = recognizer.recognize_google(audio, language="ru-RU")
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}"
# === OCR: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ==="
def ocr_from_image(image_bytes: bytes) -> str:
        img = Image.open(io.BytesIO(image_bytes))
        text = pytesseract.image_to_string(img, lang='rus+eng')
        return text if text.strip() else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        return f"–û—à–∏–±–∫–∞ OCR: {e}"
# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ) ==="
def is_owner(user_id: int) -> bool:
    return user_id == OWNER_TELEGRAM_ID
# === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü) ===
async def update_bot_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_owner(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞...")
        # –ï—Å–ª–∏ —É —Ç–µ–±—è git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ‚Äî –æ–±–Ω–æ–≤–ª—è–π —á–µ—Ä–µ–∑ git pull
        await update.message.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n{result.stdout}\n{result.stderr}")"
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")"
# === –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞) ===
async def secret_shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_owner(user_id):
    await update.message.reply_text("–í—ã–∫–ª—é—á–∞—é –±–æ—Ç–∞...")
# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Rita Mega Bot ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "safe_path_join(–ò—Å–ø–æ–ª—å–∑—É–π, gpt4), /gpt2, /gog, /ht –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É!"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/gpt4 - –†–µ–∂–∏–º OpenAI GPT-4\n"
        "/gpt2 - –†–µ–∂–∏–º HuggingFace GPT-2\n"
        "/gog - –†–µ–∂–∏–º Google –ø–æ–∏—Å–∫\n"
        "/ht - –†–µ–∂–∏–º HuggingFace –ø–æ–∏—Å–∫\n"
        "/generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º, –∏–≥—Ä, —á–∏—Ç–æ–≤, apk (—á–µ—Ä–µ–∑ GPT)\n"
        "/tts - –ì–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–≤–æ–¥ (—Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å)\n"
        "/stt - –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (—Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç)\n"
        "/ocr - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ\n"
        "/update - –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
    await update.message.reply_text(help_text)
async def switch_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmd = update.message.text.lower()
    if cmd in ("/gpt4", "/gpt2", "/gog", "/ht"):
        current_mode = cmd[1:]
        await update.message.reply_text(f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ {current_mode.upper()}")"
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–∂–∏–º–∞.")
# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat = update.message.chat
    await chat.send_action(ChatAction.TYPING)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è safe_path_join(—Å, if) text.startswith("/generate"):
        prompt = text[len("/generate"):].strip()
        if not prompt:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏–≥—Ä—ã, —á–∏—Ç–æ–≤ –∏–ª–∏ apk.")
        response = generate_code_via_gpt4(prompt)
        await update.message.reply_text(response)
    if text.startswith("/tts"):
        to_tts = text[len("/tts"):].strip()
        if not to_tts:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ safe_path_join(–ø–æ—Å–ª–µ, tts"))
        audio_bytes = text_to_speech(to_tts)
        await update.message.reply_voice(voice=io.BytesIO(audio_bytes))
    if text.startswith("/stt"):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    if text.startswith("/ocr"):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
    if text.startswith("/update"):
        await update_bot_code(update, context)
    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ò–ò
        response = call_openai_gpt4(text)
        response = call_huggingface_gpt2(text)
        response = call_google_search(text)
        response = call_huggingface_search(text)
response = Path("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
    await update.message.reply_text(response)
# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (STT) ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    voice = update.message.voice
    if not voice:
        await update.message.reply_text("–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    file = await voice.get_file()
    with tempfile.NamedTemporaryFile(suffix=".oga") as tf:
        await file.download_to_drive(custom_path=getattr(tf, "name", None))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGA –≤ WAV —á–µ—Ä–µ–∑ ffmpeg, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            wav_path = getattr(tf, "name", None) + ".wav"
            subprocess.run(["ffmpeg", "-i", getattr(tf, "name", None), wav_path], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            text = speech_to_text(wav_path)
            os.remove(wav_path)
            text = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
    await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")"
# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (OCR) ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = io.BytesIO()
    await file.download_to_memory(out=bio)
    bio.seek(0)
    text = ocr_from_image(bio.read())
    await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{text}")"
# === –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
# === –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("gpt4", switch_mode))
    app.add_handler(CommandHandler("gpt2", switch_mode))
    app.add_handler(CommandHandler("gog", switch_mode))
    app.add_handler(CommandHandler("ht", switch_mode))
    app.add_handler(CommandHandler("update", update_bot_code))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_all_messages))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    logger.info("Rita Mega Bot –∑–∞–ø—É—â–µ–Ω.")
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞)
        logging.FileHandler("safe_path_join(logs, rita_bot.log"), encoding='utf-8'),
# –¢–≤–æ–π safe_path_join(–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, start)
async def start_handler(update, context):
# –¢–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update, context):
    await update.message.reply_text(f"‚úâÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {update.message.text}")"
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–ø—Ä–∏–º–µ—Ä)
        # ... —Ç–≤–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ ...
        await asyncio.sleep(60)  # –ø–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
        application = ApplicationBuilder().token(" ").build()
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        # –î–æ–±–∞–≤—å —Å—é–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        asyncio.create_task(background_error_log_analysis())
        logger.info("[‚úÖ] Rita Mega Bot –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–ø–æ–ª–ª–∏–Ω–≥)
        await application.run_polling()
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
if __name__ == '__main__':
if __name__ == '__main__':
if __name__ == '__main__':
if __name__ == '__main__':
async def analyze_and_fix_script(script_path, log_path) -> bool:
    logger = logging.getLogger(__name__)
    if isinstance(script_path, str):
        script_path = Path(script_path)
    if isinstance(log_path, str):
        log_path = Path(log_path)
        if not script_path.exists() or not log_path.exists():
            logger.warning(f"[WARN] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path} –∏–ª–∏ {log_path}")"
        with log_path.open("r", encoding="utf-8") as f:
        last_errors = "".join(error_lines[-100:]) if error_lines else ""
        if not last_errors.strip():
            logger.info("[INFO] –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º.")
            model="gpt-4",
                {"role": "system", "content": "–¢—ã Python-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ."},
                {"role": "user", "content": f"–í–æ—Ç —Å–∫—Ä–∏–ø—Ç:\n\n{original_code}"},"
                {"role": "user", "content": f"–í–æ—Ç –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤:\n\n{last_errors}"},"
            temperature=0.2,
        fixed_code = response.choices[0].message.content
        if fixed_code.strip() != original_code.strip():
            logger.info(f"[FIX] ‚úÖ –ö–æ–¥ –≤ {script_path} –æ–±–Ω–æ–≤–ª–µ–Ω.")"
            logger.info(f"[INFO] –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ {script_path}.")"
        logger.error(f"[ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ analyze_and_fix_script: {e}")"
LOCK_FILE = Path("rita_bot.lock")
def check_already_running():
    if os.path.exists(LOCK_FILE):
        logger.info("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.")
        sys.exit(0)
        with open(LOCK_FILE, 'w') as f:
            f.write(str(os.getpid()))
def remove_lock_file():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
async def main():
    await main_entry()
if __name__ == "__main__":
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, loop.stop)
        except NotImplementedError:
            pass
    try:
        loop.run_until_complete(main())


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        pass
