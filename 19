from pathlib import Path
import re

def fix_exists_calls_in_file(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        code = f.read()

    # Паттерн для поиска вызовов .exists(), которые не окружены Path()
    # Будем искать случаи: <что-то>.exists()
    # и проверять, если перед .exists() не Path(...), добавим оборачивание
    pattern = re.compile(r'([a-zA-Z0-9_\.]+)\.exists')

    def replacer(match):
        expr = match.group(1)
        # Если уже есть Path(вызов) - не трогаем
        if expr.startswith('Path('):
            return match.group(0)
        # Иначе оборачиваем в Path()
        return f'Path({expr}).exists()'

    fixed_code = pattern.sub(replacer, code)

    with open(filename, 'w', encoding='utf-8') as f:
        f.write(fixed_code)
    print(f'[INFO] Исправлены вызовы .exists() в файле {filename}')

# Применяем к двум скриптам
fix_exists_calls_in_file('rita_main.py')
fix_exists_calls_in_file('check_bot_diagnostics.py')
