import os
import sys
import traceback

# –ü—É—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–∞–º - –º–æ–∂–Ω–æ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
LOG_FILE = 'check_bot_diagnostics.log'
MAIN_SCRIPT = 'rita_main.py'
CHECK_SCRIPT = 'check_bot_diagnostics.py'

def check_file_exists(path):
    if not os.path.isfile(path):
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return False
    return True

def fix_encoding_and_exceptions(script_path):
    try:
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç –≤ utf-8 (–µ—Å–ª–∏ —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ ‚Äî –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å)
        with open(script_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except UnicodeDecodeError:
        # –ï—Å–ª–∏ utf-8 –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —á–∏—Ç–∞–µ–º –∫–∞–∫ latin-1 –∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º
        with open(script_path, 'r', encoding='latin-1') as f:
            content = f.read()
        lines = content.encode('latin-1').decode('utf-8', errors='ignore').splitlines(keepends=True)

    fixed_lines = []
    for line in lines:
        # –ò—Å–ø—Ä–∞–≤–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ except, –≥–¥–µ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫–∏ —Å except Exception –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ except
        if line.strip().startswith('except Exception:'):
            # –∑–∞–º–µ–Ω–∏–º –Ω–∞ except Exception as e:
            line = line.replace('except Exception:', 'except Exception as e:')
        elif line.strip() == 'except:':
            # –∑–∞–º–µ–Ω–∏–º –Ω–∞ except Exception as e:
            line = line.replace('except:', 'except Exception as e:')
        fixed_lines.append(line)

    # –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è traceback, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    imports_needed = ['import traceback\n']
    if not any('traceback' in l for l in fixed_lines[:20]):
        fixed_lines.insert(0, 'import traceback\n')

    # –ó–∞–ø–∏—à–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å utf-8
    with open(script_path, 'w', encoding='utf-8') as f:
        f.writelines(fixed_lines)

    print(f"‚úÖ –§–∞–π–ª {script_path} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (–∫–æ–¥–∏—Ä–æ–≤–∫–∞ + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π).")

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤...")
    all_found = True
    for path in [LOG_FILE, MAIN_SCRIPT, CHECK_SCRIPT]:
        if not check_file_exists(path):
            all_found = False

    if not all_found:
        print("‚ùó –ò—Å–ø—Ä–∞–≤—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø—É—Å—Ç–∏ —Å–Ω–æ–≤–∞.")
        return

    print("‚úçÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ check_bot_diagnostics.py ...")
    try:
        fix_encoding_and_exceptions(CHECK_SCRIPT)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:", e)
        traceback.print_exc()
        return

    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å—Ç–∏ check_bot_diagnostics.py —Å–Ω–æ–≤–∞.")

if __name__ == '__main__':
    main()
