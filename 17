import re
from pathlib import Path

FILES = ["rita_main.py", "check_bot_diagnostics.py"]

IMPORT_STATEMENT = "from pathlib import Path"

def fix_exists_calls(text):
    # Заменяем строки вида:
    # some_string.exists()
    # на
    # Path(some_string).exists()
    # избегая двойной замены, если уже исправлено
    pattern = re.compile(r"(?<!Path)(\b\w+\.exists)")
    # более точный паттерн, заменяем variable.exists() если variable - не Path
    # Но для простоты заменим все ".exists()" на "Path(variable).exists()" с парсингом переменной
    
    # Вместо сложного парсинга сделаем замену на более простой вариант:
    # Найдем все вхождения <что-то>.exists() и заменим на Path(<что-то без .exists()>).exists()
    
    # Пример: some_var.exists() -> Path(some_var).exists()
    # Для этого возьмем группу (\b[\w\.]+)\.exists и заменим на Path(\1).exists()
    
    pattern = re.compile(r"\b([\w\.]+)\.exists")
    fixed_text = pattern.sub(r"Path(\1).exists()", text)
    return fixed_text

def ensure_import(text):
    if IMPORT_STATEMENT not in text:
        # Добавим импорт в начало файла после первой строки с кодом или после других импортов
        lines = text.splitlines()
        insert_pos = 0
        for i, line in enumerate(lines):
            if line.strip() and not line.startswith("#") and not line.strip().startswith("import") and not line.strip().startswith("from"):
                insert_pos = i
                break
        lines.insert(insert_pos, IMPORT_STATEMENT)
        return "\n".join(lines)
    return text

def process_file(filename):
    path = Path(filename)
    if not path.exists():
        print(f"Файл {filename} не найден, пропускаем...")
        return
    text = path.read_text(encoding="utf-8")
    original_text = text
    text = fix_exists_calls(text)
    text = ensure_import(text)
    if text != original_text:
        path.write_text(text, encoding="utf-8")
        print(f"Исправления внесены в файл {filename}")
    else:
        print(f"Файл {filename} уже исправлен")

if __name__ == "__main__":
    for file in FILES:
        process_file(file)
