	mport subprocess
import os
import logging

async def update_self():
    logger = logging.getLogger(__name__)
    repo_dir = os.path.dirname(os.path.abspath(__file__))

    logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ Git...")

    if not os.path.isdir(os.path.join(repo_dir, ".git")):
        logger.warning("‚ùå –≠—Ç–æ –Ω–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    try:
        result = subprocess.run(
            ["git", "-C", repo_dir, "pull"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if result.returncode == 0:
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n" + result.stdout)
        else:
            logger.warning(f"‚ö†Ô∏è Git pull –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n{result.stderr}")
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ git pull: {e}")
