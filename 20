import re
from pathlib import Path

FILES = ["rita_main.py", "check_bot_diagnostics.py"]

SAFE_EXISTS_DEF = """
from pathlib import Path

def safe_exists(path):
    if isinstance(path, str):
        path = Path(path)
    return path.exists()
"""

def add_safe_exists_def(content):
    if "def safe_exists" in content:
        return content  # уже есть
    # Добавляем после импортов или в начало
    # Найдём позицию после последних импортов
    imports = list(re.finditer(r'^(import .+|from .+ import .+)$', content, re.MULTILINE))
    if imports:
        last_import = imports[-1]
        insert_pos = last_import.end()
        new_content = content[:insert_pos] + SAFE_EXISTS_DEF + "\n" + content[insert_pos:]
    else:
        new_content = SAFE_EXISTS_DEF + "\n" + content
    return new_content

def replace_exists_calls(content):
    # Заменим all occurrences of <expr>.exists()
    # на safe_exists(<expr>)
    # Регулярка для .exists() с захватом выражения до точки
    # Пример: some_path.exists() -> safe_exists(some_path)
    # Аккуратно с вложенностями и пробелами
    pattern = re.compile(r'(\S+)\.exists')

    def replacer(match):
        expr = match.group(1)
        return f"safe_exists({expr})"

    new_content = pattern.sub(replacer, content)
    return new_content

def patch_file(filepath):
    path = Path(filepath)
    if not path.exists():
        print(f"[WARNING] Файл {filepath} не найден. Пропускаем.")
        return

    content = path.read_text(encoding="utf-8")
    content = add_safe_exists_def(content)
    content = replace_exists_calls(content)

    path.write_text(content, encoding="utf-8")
    print(f"[INFO] Файл {filepath} успешно пропатчен.")

def main():
    for f in FILES:
        patch_file(f)

if __name__ == "__main__":
    main()
